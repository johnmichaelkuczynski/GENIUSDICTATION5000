/**
 * Service for exporting text as LaTeX and PDF documents
 */

export interface LaTeXExportOptions {
  title?: string;
  author?: string;
  documentClass?: 'article' | 'report' | 'book';
  packages?: string[];
}

/**
 * Generate a LaTeX document from text content
 * @param content The text content with LaTeX math notation
 * @param options Export options
 * @returns LaTeX document string
 */
export function generateLaTeXDocument(content: string, options: LaTeXExportOptions = {}): string {
  const {
    title = 'Mathematical Document',
    author = 'Generated by Genius Dictation',
    documentClass = 'article',
    packages = ['amsmath', 'amsfonts', 'amssymb', 'amsthm', 'mathtools']
  } = options;

  const latexContent = `\\documentclass{${documentClass}}

% Mathematical packages
${packages.map(pkg => `\\usepackage{${pkg}}`).join('\n')}

% Other useful packages
\\usepackage[utf8]{inputenc}
\\usepackage[T1]{fontenc}
\\usepackage{geometry}
\\usepackage{setspace}
\\usepackage{hyperref}

% Set page margins
\\geometry{margin=1in}

% Document metadata
\\title{${escapeLatex(title)}}
\\author{${escapeLatex(author)}}
\\date{\\today}

\\begin{document}

\\maketitle

${processContentForLatex(content)}

\\end{document}`;

  return latexContent;
}

/**
 * Process content to ensure proper LaTeX formatting
 * @param content Raw content
 * @returns Processed LaTeX content
 */
function processContentForLatex(content: string): string {
  // Convert markdown-style headers to LaTeX sections
  let processed = content
    .replace(/^# (.+)$/gm, '\\section{$1}')
    .replace(/^## (.+)$/gm, '\\subsection{$1}')
    .replace(/^### (.+)$/gm, '\\subsubsection{$1}');

  // Ensure proper paragraph breaks
  processed = processed.replace(/\n\s*\n/g, '\n\n');

  // Handle special characters
  processed = escapeLatexText(processed);

  return processed;
}

/**
 * Escape special LaTeX characters in regular text (but preserve math mode)
 * @param text Text to escape
 * @returns Escaped text
 */
function escapeLatexText(text: string): string {
  // Split text into math and non-math parts
  const parts: { content: string; isMath: boolean }[] = [];
  const mathRegex = /(\$\$[\s\S]*?\$\$|\$[^$\n]*?\$)/g;
  
  let lastIndex = 0;
  let match;
  
  while ((match = mathRegex.exec(text)) !== null) {
    // Add non-math part before this match
    if (match.index > lastIndex) {
      parts.push({
        content: text.slice(lastIndex, match.index),
        isMath: false
      });
    }
    
    // Add math part
    parts.push({
      content: match[0],
      isMath: true
    });
    
    lastIndex = match.index + match[0].length;
  }
  
  // Add remaining non-math part
  if (lastIndex < text.length) {
    parts.push({
      content: text.slice(lastIndex),
      isMath: false
    });
  }
  
  // Escape only non-math parts
  return parts.map(part => {
    if (part.isMath) {
      return part.content;
    } else {
      return escapeLatex(part.content);
    }
  }).join('');
}

/**
 * Escape special LaTeX characters
 * @param text Text to escape
 * @returns Escaped text
 */
function escapeLatex(text: string): string {
  return text
    .replace(/\\/g, '\\textbackslash{}')
    .replace(/[{}]/g, '\\$&')
    .replace(/[$]/g, '\\$')
    .replace(/[%]/g, '\\%')
    .replace(/[#]/g, '\\#')
    .replace(/[&]/g, '\\&')
    .replace(/[_]/g, '\\_')
    .replace(/[\^]/g, '\\textasciicircum{}')
    .replace(/[~]/g, '\\textasciitilde{}');
}

/**
 * Generate LaTeX file buffer
 * @param content Text content
 * @param options Export options
 * @returns Buffer containing LaTeX file
 */
export function generateLaTeXFile(content: string, options: LaTeXExportOptions = {}): Buffer {
  const latexDocument = generateLaTeXDocument(content, options);
  return Buffer.from(latexDocument, 'utf-8')